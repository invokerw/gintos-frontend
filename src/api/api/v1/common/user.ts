// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.14.0
// source: v1/common/user.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "api.common.v1";

/** 用户权限 */
export enum UserAuthority {
  /** SYS_ADMIN - 系统超级用户 */
  SYS_ADMIN = 0,
  /** SYS_MANAGER - 系统管理员 */
  SYS_MANAGER = 1,
  /** CUSTOMER_USER - 普通用户 */
  CUSTOMER_USER = 2,
  /** GUEST_USER - 游客 */
  GUEST_USER = 3,
  UNRECOGNIZED = -1
}

export function userAuthorityFromJSON(object: any): UserAuthority {
  switch (object) {
    case 0:
    case "SYS_ADMIN":
      return UserAuthority.SYS_ADMIN;
    case 1:
    case "SYS_MANAGER":
      return UserAuthority.SYS_MANAGER;
    case 2:
    case "CUSTOMER_USER":
      return UserAuthority.CUSTOMER_USER;
    case 3:
    case "GUEST_USER":
      return UserAuthority.GUEST_USER;
    case -1:
    case "UNRECOGNIZED":
    default:
      return UserAuthority.UNRECOGNIZED;
  }
}

export function userAuthorityToJSON(object: UserAuthority): number {
  switch (object) {
    case UserAuthority.SYS_ADMIN:
      return 0;
    case UserAuthority.SYS_MANAGER:
      return 1;
    case UserAuthority.CUSTOMER_USER:
      return 2;
    case UserAuthority.GUEST_USER:
      return 3;
    case UserAuthority.UNRECOGNIZED:
    default:
      return -1;
  }
}

/** 用户性别 */
export enum UserGender {
  /** SECRET - 未知 */
  SECRET = 0,
  /** MALE - 男性 */
  MALE = 1,
  /** FEMALE - 女性 */
  FEMALE = 2,
  UNRECOGNIZED = -1
}

export function userGenderFromJSON(object: any): UserGender {
  switch (object) {
    case 0:
    case "SECRET":
      return UserGender.SECRET;
    case 1:
    case "MALE":
      return UserGender.MALE;
    case 2:
    case "FEMALE":
      return UserGender.FEMALE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return UserGender.UNRECOGNIZED;
  }
}

export function userGenderToJSON(object: UserGender): number {
  switch (object) {
    case UserGender.SECRET:
      return 0;
    case UserGender.MALE:
      return 1;
    case UserGender.FEMALE:
      return 2;
    case UserGender.UNRECOGNIZED:
    default:
      return -1;
  }
}

/** 用户状态 */
export enum UserStatus {
  OFF = 0,
  ON = 1,
  UNRECOGNIZED = -1
}

export function userStatusFromJSON(object: any): UserStatus {
  switch (object) {
    case 0:
    case "OFF":
      return UserStatus.OFF;
    case 1:
    case "ON":
      return UserStatus.ON;
    case -1:
    case "UNRECOGNIZED":
    default:
      return UserStatus.UNRECOGNIZED;
  }
}

export function userStatusToJSON(object: UserStatus): number {
  switch (object) {
    case UserStatus.OFF:
      return 0;
    case UserStatus.ON:
      return 1;
    case UserStatus.UNRECOGNIZED:
    default:
      return -1;
  }
}

/** 用户 */
export interface User {
  /** 用户ID */
  id?: number | undefined;
  /** 角色名称 */
  roleName?: string | undefined;
  /** 创建者ID */
  createBy?: number | undefined;
  /** 更新者ID */
  updateBy?: number | undefined;
  /** 登录名 */
  username?: string | undefined;
  /** 密码 */
  password?: string | undefined;
  /** 昵称 */
  nickname?: string | undefined;
  /** 头像 */
  avatar?: string | undefined;
  /** 邮箱 */
  email?: string | undefined;
  /** 手机号 */
  phone?: string | undefined;
  /** 性别 */
  gender?: UserGender | undefined;
  /** 备注名 */
  remark?: string | undefined;
  /** 最后登录时间 */
  lastLoginTime?: number | undefined;
  /** 用户状态 */
  status?: UserStatus | undefined;
  /** 权限 */
  authority?: UserAuthority | undefined;
  /** 角色码 */
  roles: string[];
  /** 创建时间 */
  createTime?: number | undefined;
  /** 更新时间 */
  updateTime?: number | undefined;
}

/** Role */
export interface Role {
  /** 角色ID */
  id?: number | undefined;
  name?: string | undefined;
  desc?: string | undefined;
  parentId?: number | undefined;
  sortId?: number | undefined;
  /** 创建时间 */
  createTime?: number | undefined;
  /** 更新时间 */
  updateTime?: number | undefined;
}

function createBaseUser(): User {
  return {
    id: undefined,
    roleName: undefined,
    createBy: undefined,
    updateBy: undefined,
    username: undefined,
    password: undefined,
    nickname: undefined,
    avatar: undefined,
    email: undefined,
    phone: undefined,
    gender: undefined,
    remark: undefined,
    lastLoginTime: undefined,
    status: undefined,
    authority: undefined,
    roles: [],
    createTime: undefined,
    updateTime: undefined
  };
}

export const User: MessageFns<User> = {
  encode(
    message: User,
    writer: BinaryWriter = new BinaryWriter()
  ): BinaryWriter {
    if (message.id !== undefined) {
      writer.uint32(8).uint64(message.id);
    }
    if (message.roleName !== undefined) {
      writer.uint32(18).string(message.roleName);
    }
    if (message.createBy !== undefined) {
      writer.uint32(56).uint64(message.createBy);
    }
    if (message.updateBy !== undefined) {
      writer.uint32(64).uint64(message.updateBy);
    }
    if (message.username !== undefined) {
      writer.uint32(82).string(message.username);
    }
    if (message.password !== undefined) {
      writer.uint32(90).string(message.password);
    }
    if (message.nickname !== undefined) {
      writer.uint32(98).string(message.nickname);
    }
    if (message.avatar !== undefined) {
      writer.uint32(106).string(message.avatar);
    }
    if (message.email !== undefined) {
      writer.uint32(114).string(message.email);
    }
    if (message.phone !== undefined) {
      writer.uint32(122).string(message.phone);
    }
    if (message.gender !== undefined) {
      writer.uint32(136).int32(message.gender);
    }
    if (message.remark !== undefined) {
      writer.uint32(170).string(message.remark);
    }
    if (message.lastLoginTime !== undefined) {
      writer.uint32(240).int64(message.lastLoginTime);
    }
    if (message.status !== undefined) {
      writer.uint32(256).int32(message.status);
    }
    if (message.authority !== undefined) {
      writer.uint32(264).int32(message.authority);
    }
    for (const v of message.roles) {
      writer.uint32(274).string(v!);
    }
    if (message.createTime !== undefined) {
      writer.uint32(1600).int64(message.createTime);
    }
    if (message.updateTime !== undefined) {
      writer.uint32(1608).int64(message.updateTime);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): User {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUser();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = longToNumber(reader.uint64());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.roleName = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.createBy = longToNumber(reader.uint64());
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.updateBy = longToNumber(reader.uint64());
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.username = reader.string();
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.password = reader.string();
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.nickname = reader.string();
          continue;
        }
        case 13: {
          if (tag !== 106) {
            break;
          }

          message.avatar = reader.string();
          continue;
        }
        case 14: {
          if (tag !== 114) {
            break;
          }

          message.email = reader.string();
          continue;
        }
        case 15: {
          if (tag !== 122) {
            break;
          }

          message.phone = reader.string();
          continue;
        }
        case 17: {
          if (tag !== 136) {
            break;
          }

          message.gender = reader.int32() as any;
          continue;
        }
        case 21: {
          if (tag !== 170) {
            break;
          }

          message.remark = reader.string();
          continue;
        }
        case 30: {
          if (tag !== 240) {
            break;
          }

          message.lastLoginTime = longToNumber(reader.int64());
          continue;
        }
        case 32: {
          if (tag !== 256) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
        }
        case 33: {
          if (tag !== 264) {
            break;
          }

          message.authority = reader.int32() as any;
          continue;
        }
        case 34: {
          if (tag !== 274) {
            break;
          }

          message.roles.push(reader.string());
          continue;
        }
        case 200: {
          if (tag !== 1600) {
            break;
          }

          message.createTime = longToNumber(reader.int64());
          continue;
        }
        case 201: {
          if (tag !== 1608) {
            break;
          }

          message.updateTime = longToNumber(reader.int64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): User {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : undefined,
      roleName: isSet(object.role_name)
        ? globalThis.String(object.role_name)
        : undefined,
      createBy: isSet(object.create_by)
        ? globalThis.Number(object.create_by)
        : undefined,
      updateBy: isSet(object.update_by)
        ? globalThis.Number(object.update_by)
        : undefined,
      username: isSet(object.username)
        ? globalThis.String(object.username)
        : undefined,
      password: isSet(object.password)
        ? globalThis.String(object.password)
        : undefined,
      nickname: isSet(object.nickname)
        ? globalThis.String(object.nickname)
        : undefined,
      avatar: isSet(object.avatar)
        ? globalThis.String(object.avatar)
        : undefined,
      email: isSet(object.email) ? globalThis.String(object.email) : undefined,
      phone: isSet(object.phone) ? globalThis.String(object.phone) : undefined,
      gender: isSet(object.gender)
        ? userGenderFromJSON(object.gender)
        : undefined,
      remark: isSet(object.remark)
        ? globalThis.String(object.remark)
        : undefined,
      lastLoginTime: isSet(object.last_login_time)
        ? globalThis.Number(object.last_login_time)
        : undefined,
      status: isSet(object.status)
        ? userStatusFromJSON(object.status)
        : undefined,
      authority: isSet(object.authority)
        ? userAuthorityFromJSON(object.authority)
        : undefined,
      roles: globalThis.Array.isArray(object?.roles)
        ? object.roles.map((e: any) => globalThis.String(e))
        : [],
      createTime: isSet(object.create_time)
        ? globalThis.Number(object.create_time)
        : undefined,
      updateTime: isSet(object.update_time)
        ? globalThis.Number(object.update_time)
        : undefined
    };
  },

  toJSON(message: User): unknown {
    const obj: any = {};
    if (message.id !== undefined) {
      obj.id = Math.round(message.id);
    }
    if (message.roleName !== undefined) {
      obj.role_name = message.roleName;
    }
    if (message.createBy !== undefined) {
      obj.create_by = Math.round(message.createBy);
    }
    if (message.updateBy !== undefined) {
      obj.update_by = Math.round(message.updateBy);
    }
    if (message.username !== undefined) {
      obj.username = message.username;
    }
    if (message.password !== undefined) {
      obj.password = message.password;
    }
    if (message.nickname !== undefined) {
      obj.nickname = message.nickname;
    }
    if (message.avatar !== undefined) {
      obj.avatar = message.avatar;
    }
    if (message.email !== undefined) {
      obj.email = message.email;
    }
    if (message.phone !== undefined) {
      obj.phone = message.phone;
    }
    if (message.gender !== undefined) {
      obj.gender = userGenderToJSON(message.gender);
    }
    if (message.remark !== undefined) {
      obj.remark = message.remark;
    }
    if (message.lastLoginTime !== undefined) {
      obj.last_login_time = Math.round(message.lastLoginTime);
    }
    if (message.status !== undefined) {
      obj.status = userStatusToJSON(message.status);
    }
    if (message.authority !== undefined) {
      obj.authority = userAuthorityToJSON(message.authority);
    }
    if (message.roles?.length) {
      obj.roles = message.roles;
    }
    if (message.createTime !== undefined) {
      obj.create_time = Math.round(message.createTime);
    }
    if (message.updateTime !== undefined) {
      obj.update_time = Math.round(message.updateTime);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<User>, I>>(base?: I): User {
    return User.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<User>, I>>(object: I): User {
    const message = createBaseUser();
    message.id = object.id ?? undefined;
    message.roleName = object.roleName ?? undefined;
    message.createBy = object.createBy ?? undefined;
    message.updateBy = object.updateBy ?? undefined;
    message.username = object.username ?? undefined;
    message.password = object.password ?? undefined;
    message.nickname = object.nickname ?? undefined;
    message.avatar = object.avatar ?? undefined;
    message.email = object.email ?? undefined;
    message.phone = object.phone ?? undefined;
    message.gender = object.gender ?? undefined;
    message.remark = object.remark ?? undefined;
    message.lastLoginTime = object.lastLoginTime ?? undefined;
    message.status = object.status ?? undefined;
    message.authority = object.authority ?? undefined;
    message.roles = object.roles?.map(e => e) || [];
    message.createTime = object.createTime ?? undefined;
    message.updateTime = object.updateTime ?? undefined;
    return message;
  }
};

function createBaseRole(): Role {
  return {
    id: undefined,
    name: undefined,
    desc: undefined,
    parentId: undefined,
    sortId: undefined,
    createTime: undefined,
    updateTime: undefined
  };
}

export const Role: MessageFns<Role> = {
  encode(
    message: Role,
    writer: BinaryWriter = new BinaryWriter()
  ): BinaryWriter {
    if (message.id !== undefined) {
      writer.uint32(8).uint64(message.id);
    }
    if (message.name !== undefined) {
      writer.uint32(18).string(message.name);
    }
    if (message.desc !== undefined) {
      writer.uint32(26).string(message.desc);
    }
    if (message.parentId !== undefined) {
      writer.uint32(32).uint64(message.parentId);
    }
    if (message.sortId !== undefined) {
      writer.uint32(40).int32(message.sortId);
    }
    if (message.createTime !== undefined) {
      writer.uint32(1600).int64(message.createTime);
    }
    if (message.updateTime !== undefined) {
      writer.uint32(1608).int64(message.updateTime);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Role {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRole();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = longToNumber(reader.uint64());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.desc = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.parentId = longToNumber(reader.uint64());
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.sortId = reader.int32();
          continue;
        }
        case 200: {
          if (tag !== 1600) {
            break;
          }

          message.createTime = longToNumber(reader.int64());
          continue;
        }
        case 201: {
          if (tag !== 1608) {
            break;
          }

          message.updateTime = longToNumber(reader.int64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Role {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : undefined,
      name: isSet(object.name) ? globalThis.String(object.name) : undefined,
      desc: isSet(object.desc) ? globalThis.String(object.desc) : undefined,
      parentId: isSet(object.parent_id)
        ? globalThis.Number(object.parent_id)
        : undefined,
      sortId: isSet(object.sort_id)
        ? globalThis.Number(object.sort_id)
        : undefined,
      createTime: isSet(object.create_time)
        ? globalThis.Number(object.create_time)
        : undefined,
      updateTime: isSet(object.update_time)
        ? globalThis.Number(object.update_time)
        : undefined
    };
  },

  toJSON(message: Role): unknown {
    const obj: any = {};
    if (message.id !== undefined) {
      obj.id = Math.round(message.id);
    }
    if (message.name !== undefined) {
      obj.name = message.name;
    }
    if (message.desc !== undefined) {
      obj.desc = message.desc;
    }
    if (message.parentId !== undefined) {
      obj.parent_id = Math.round(message.parentId);
    }
    if (message.sortId !== undefined) {
      obj.sort_id = Math.round(message.sortId);
    }
    if (message.createTime !== undefined) {
      obj.create_time = Math.round(message.createTime);
    }
    if (message.updateTime !== undefined) {
      obj.update_time = Math.round(message.updateTime);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Role>, I>>(base?: I): Role {
    return Role.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Role>, I>>(object: I): Role {
    const message = createBaseRole();
    message.id = object.id ?? undefined;
    message.name = object.name ?? undefined;
    message.desc = object.desc ?? undefined;
    message.parentId = object.parentId ?? undefined;
    message.sortId = object.sortId ?? undefined;
    message.createTime = object.createTime ?? undefined;
    message.updateTime = object.updateTime ?? undefined;
    return message;
  }
};

type Builtin =
  | Date
  | Function
  | Uint8Array
  | string
  | number
  | boolean
  | undefined;

export type DeepPartial<T> = T extends Builtin
  ? T
  : T extends globalThis.Array<infer U>
    ? globalThis.Array<DeepPartial<U>>
    : T extends ReadonlyArray<infer U>
      ? ReadonlyArray<DeepPartial<U>>
      : T extends {}
        ? { [K in keyof T]?: DeepPartial<T[K]> }
        : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin
  ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & {
      [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
    };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
