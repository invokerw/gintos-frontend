// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.14.0
// source: v1/admin/admin.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { PageInfo } from "../common/common";
import { User } from "../common/user";

export const protobufPackage = "api.auth.v1";

export interface GetUserListRequest {
  /** 分页信息 */
  page: PageInfo | undefined;
  /** 登录名 */
  username?: string | undefined;
  /** 昵称 */
  nickname?: string | undefined;
}

export interface GetUserListResponse {
  users: User[];
}

function createBaseGetUserListRequest(): GetUserListRequest {
  return { page: undefined, username: undefined, nickname: undefined };
}

export const GetUserListRequest: MessageFns<GetUserListRequest> = {
  encode(
    message: GetUserListRequest,
    writer: BinaryWriter = new BinaryWriter()
  ): BinaryWriter {
    if (message.page !== undefined) {
      PageInfo.encode(message.page, writer.uint32(10).fork()).join();
    }
    if (message.username !== undefined) {
      writer.uint32(18).string(message.username);
    }
    if (message.nickname !== undefined) {
      writer.uint32(26).string(message.nickname);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number
  ): GetUserListRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetUserListRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.page = PageInfo.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.username = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.nickname = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetUserListRequest {
    return {
      page: isSet(object.page) ? PageInfo.fromJSON(object.page) : undefined,
      username: isSet(object.username)
        ? globalThis.String(object.username)
        : undefined,
      nickname: isSet(object.nickname)
        ? globalThis.String(object.nickname)
        : undefined
    };
  },

  toJSON(message: GetUserListRequest): unknown {
    const obj: any = {};
    if (message.page !== undefined) {
      obj.page = PageInfo.toJSON(message.page);
    }
    if (message.username !== undefined) {
      obj.username = message.username;
    }
    if (message.nickname !== undefined) {
      obj.nickname = message.nickname;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetUserListRequest>, I>>(
    base?: I
  ): GetUserListRequest {
    return GetUserListRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetUserListRequest>, I>>(
    object: I
  ): GetUserListRequest {
    const message = createBaseGetUserListRequest();
    message.page =
      object.page !== undefined && object.page !== null
        ? PageInfo.fromPartial(object.page)
        : undefined;
    message.username = object.username ?? undefined;
    message.nickname = object.nickname ?? undefined;
    return message;
  }
};

function createBaseGetUserListResponse(): GetUserListResponse {
  return { users: [] };
}

export const GetUserListResponse: MessageFns<GetUserListResponse> = {
  encode(
    message: GetUserListResponse,
    writer: BinaryWriter = new BinaryWriter()
  ): BinaryWriter {
    for (const v of message.users) {
      User.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number
  ): GetUserListResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetUserListResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.users.push(User.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetUserListResponse {
    return {
      users: globalThis.Array.isArray(object?.users)
        ? object.users.map((e: any) => User.fromJSON(e))
        : []
    };
  },

  toJSON(message: GetUserListResponse): unknown {
    const obj: any = {};
    if (message.users?.length) {
      obj.users = message.users.map(e => User.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetUserListResponse>, I>>(
    base?: I
  ): GetUserListResponse {
    return GetUserListResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetUserListResponse>, I>>(
    object: I
  ): GetUserListResponse {
    const message = createBaseGetUserListResponse();
    message.users = object.users?.map(e => User.fromPartial(e)) || [];
    return message;
  }
};

export interface Admin {
  /** 登录 */
  GetUserList(request: GetUserListRequest): Promise<GetUserListResponse>;
}

export const AdminServiceName = "api.auth.v1.Admin";
export class AdminClientImpl implements Admin {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || AdminServiceName;
    this.rpc = rpc;
    this.GetUserList = this.GetUserList.bind(this);
  }
  GetUserList(request: GetUserListRequest): Promise<GetUserListResponse> {
    const data = GetUserListRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetUserList", data);
    return promise.then(data =>
      GetUserListResponse.decode(new BinaryReader(data))
    );
  }
}

interface Rpc {
  request(
    service: string,
    method: string,
    data: Uint8Array
  ): Promise<Uint8Array>;
}

type Builtin =
  | Date
  | Function
  | Uint8Array
  | string
  | number
  | boolean
  | undefined;

export type DeepPartial<T> = T extends Builtin
  ? T
  : T extends globalThis.Array<infer U>
    ? globalThis.Array<DeepPartial<U>>
    : T extends ReadonlyArray<infer U>
      ? ReadonlyArray<DeepPartial<U>>
      : T extends {}
        ? { [K in keyof T]?: DeepPartial<T[K]> }
        : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin
  ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & {
      [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
    };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
